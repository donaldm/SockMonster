<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>CatBed_Sprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum search_states {
    sweep = 0,
    follow = 1
}

angle = 0;
sight_width = 50;
sight_distance = 100;
sweep_speed = 1;
search_state = search_states.sweep;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dist = distance_to_object( Monster ) + 34;
sight_ang = point_direction(x, Monster.y, Monster.x, y);

if ( search_state == search_states.sweep and dist &lt; sight_distance )
{
    //The player is inside of the beam
    if ( sight_ang &gt;= angle - sight_width / 2 and 
         sight_ang &lt;= angle + sight_width / 2 )
    {
        //make the beam follow the player around
        search_state = search_states.follow;
        audio_play_sound(Meow, 1, false);
    }
}

//The player leaves the beam
if ( dist &gt; sight_distance )
{
    //Go back to the sweeping search mode
    search_state = search_states.sweep;
}

if ( search_state == search_states.sweep )
{
    //increment the angle and wrap it to 0 to 360
    angle = (angle + sweep_speed) mod 360;
}

if ( search_state == search_states.follow )
{
    //set the beam to the player angle
    angle = sight_ang;
    //modify variables in the monster
    with(Monster)
    {
        health -= 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Sock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    instance_destroy();
}

global.socks_left += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_primitive_begin(pr_trianglefan);
draw_vertex(x, y);
draw_set_alpha(0.7);
draw_set_colour(make_colour_rgb(200,200,10));
for(i = angle - sight_width / 2 ; i &lt;= angle + sight_width / 2; i += 0.1)
{
    arc_x = x + cos(degtorad(i)) * sight_distance;
    arc_y = y + sin(degtorad(i)) * sight_distance;
    draw_vertex(arc_x, arc_y);   
}
draw_primitive_end();

draw_self();
draw_set_alpha(1);

draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
